1.Під час компіляції початковий код перетворюється у машинний під певну цільову архітектуру, зберігається у файл, запускається в оперційній системі.
Переваги: висока швидкість роботи програм, висока надійність коду( перевірка типів + синтаксична перевірка)
Під час інтерпретації початковий код виконується рядок за рядком за допомогої спеціальної програми-інтерпретатора в ран-таймі.
Переваги: висока кросплатформеність.
2.Початковий код має один або декілька описів класів на мові java та зберігається у файлах з розширенням java.
Байт-код Java — набір інструкцій віртуальної машини Java (JVM)( генерується з початкового коду за допомогою віртуальнох машини джава).	
Маши́нний код — набір команд (інструкцій), які виконуються безпосередньо центральним процесором комп'ютера без транслятора. Кожен тип центрального процесора має власний машинний код. 
Just-in-time compilation (JIT) (також відома як dynamic translation) — компіляція «на льоту» — це технологія збільшення продуктивності програмних систем, що використовують байт-код, шляхом трансляції байт-коду в машинний код безпосередньо під час роботи програми. У такий спосіб досягається висока швидкість виконання за рахунок збільшення споживання пам'яті (для зберігання результатів компіляції) і витрат часу на компіляцію. JIT комбінує переваги інтерпретації та статичної компіляції.
3.Віртуальна машина — модель обчислювальної машини, створеної шляхом віртуалізації обчислювальних ресурсів: процесора, оперативної пам'яті, пристроїв зберігання та вводу і виводу інформації.

Віртуальна машина, на відміну від програми емуляції конкретного пристрою, забезпечує повну емуляцію фізичної машини чи середовища виконання (для програми).
Віртуальні машини поділяються на 2 головні категорії, в залежності від їх використання та відповідності до реальної апаратури:

системні (апаратні) віртуальні машини, що забезпечують повноцінну емуляцію всієї апаратної платформи і відповідно підтримують виконання операційної системи.
прикладні віртуальні машини, які розробленні для виконання лише застосунків (прикладних програм), наприклад, Віртуальна машина Java.
Прикладні віртуальні машини виконують звичайні програми всередині ОС. Вони зазвичай створюються коли програма запускається та знищуються після її завершення. Їхня ціль — забезпечити платформно-незалежне програмне середовище, яке дозволяє абстрагуватися від конкретної апаратури та операційної системи, на якій виконується програма.

Прикладна ВМ забезпечує високорівневу абстракцію (наприклад, інтерпретатори високорівневих мов програмування — Lisp, Java, Python, Perl), в той час як системні ВМ зазвичай обмежуються низькорівневою абстракцією (машинним набором кодів). Сучасні прикладні ВМ, що реалізуються за допомогою інтерпретаторів, для підвищення швидкості виконання використовують компіляцію «на льоту» (англ. JIT — just-in-time).
4.Кросплатформність -  властивість програмного забезпечення працювати більш ніж на одній програмній (в тому числі — операційній системі) або апаратній платформі; технології, що дозволяють досягти такої властивості. Кросплатформність дозволяє суттєво скоротити витрати на розробку нового або адаптацію існуючого програмного забезпечення.

Залежно від засобів реалізації поділяється на кросплатформність на рівні мов програмування (а також інструментів таких мов: компіляторів та редакторів зв'язків), середовища виконання, операційної системи та апаратної платформи.
Java - кросплатформна мова на рівні виконання, тобто її виконавчі файли можна запускати на різних платформах без попередньої перекомпіляції.
Кросплатформеність реалізована і через віртуальна машину джава.
5.
class - шаблоном або описом об'єкту є клас, а об'єкт представляє екземпляр цього класу.Клас визначається цим ключевим словом.Після назви класу йдуть фігурні скобки, в яких 
          знаходиться тіло класу: його методи і поля.
  
public - модифікатор доступу, що визначає правила доступу до членів класу з інших частин програми. З цим модифікатор доступ можливий за межами класу.

static -  ключове слово позначає, що до змінної або методу члена можна отримати доступ, не вимагаючи примірника класу, до якого він належить. Можна викликати метод, навіть якщо ви ніколи не створювали об’єкт, до якого він належить. В контексті класу це позначає, що клас знаходиться в класі вищого рівня. Такі класи також відомі як вкладені класи, і їх можна оголосити статичними.
Ключове слово в даній ситуації дозволяє виклик методу main() до створення об'єкту класу.Вказувати його потрібно, бо метод main() викликається віртуальною машиною, ще до того як будуть створені будь-які об'єкти.

void - якщо метод нічого не повертає, то вказується цей тип.

String - Клас String представляє символьні рядки. Всі рядкові літерали в програмах Java, такі як "abc", реалізовані як екземпляри цього класу.Строки постійні; їх значення не можуть бути змінені після їх створення. 

System - Клас System є одним з базових, що містить базові методи для роботи з вводом та виводом даних і т.д.Клас java.lang.System є final, всі поля і методи є static,тому ми не зможемо створити підклас та переозначити його методи використовуючи наслідування.Клас Java System не має публічних конструкторів, тому ми не зможемо створити екземпляр цього класу.Виклик методу з класу java.lang.System виглядає так: System.out.print().

out - статичне кінцеве поле (змінна) в класі System, котре відноситься до типу PrintStream (вбудований клас, містить методи для друку різних значень данних). Статичні поля та методи повинні  бути доступні за допомогою імені класу, тому (System.out).

println - є широкодоступним методом в класі PrintStream для друку значень данних. Тому для доступу до методу в класі PrintStream ми використовуємо out.println() (оскільки нестатичні методи і поля можуть бути доступні тільки за допомогою variable refrence).

6.Java - регістро чутлива мова. class != CLASS.

7.Так можно встановити декілька різних версій, працювати буде за замовчуванням та що буде першою визначена в змінній середовища PATH. Можна створити bat файли для запуску специфічної версії або прописувати для кожного проєкту в IDE. Це потрібно для підтримки і створення проєктів на різних версіях або експерименту з новішими версіями, себто новим функціоналом.
