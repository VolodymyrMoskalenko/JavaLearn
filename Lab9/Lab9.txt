1. Що таке immutable об’єкт? Для чого об’єкти класу String зробили імутабельними? 
Чому клас String задекларований як final?
mmutable об'єкт - це об'єкт, стан якого після створення неможливо змінити.
 У разі Java це значить що всі поля екземпляра у клас відзначені як final і є примітивами
 або теж immutable типами.

приклад:

public class ImmutablePoint {
    private final int x;
    private final int y;
    private final String description;

    public ImmutablePoint (int x, int y, String description) {
        this.x = x;
        this.y = y;
        this.description = description;
    }
}
Після створення екземпляра ImmutablePoint його модифікація неможлива.

Найпростіший приклад immutable класу з JDK це String. Будь-які методи, які ви викличте на рядку 
(наприклад description.toLowerCase ()) повернуть новий рядок, а не модифікують вихідну.
Оскільки java використовує поняття string literal, string is immutable. Припустимо, існує 5 змінних з посиланнями, 
всі звертаються до одного об'єкта "sachin". Якщо одна змінна змінює значення об'єкта,
це матиме еффект на усі референтні змінні. Ось чому String об'єкти незмінні в Java.
Сутність модифікатора final зробити подальші зміни обєкту неможливими.

2. Що таке регулярні вирази? Наведіть приклади регулярних виразів.
це рядок, що описує або збігається з множиною рядків, відповідно до набору спеціальних синтаксичних правил.
 Вони використовуються в багатьох текстових редакторах та допоміжних інструментах для пошуку та зміни 
 тексту на основі заданих шаблонів. 
Багато мов програмування підтримують регулярні вирази для роботи з рядками. 
Пакет java.util.regex підтримує обробку регулярних виразів (regular expression).
Пакет містить два класи - Pattern і Matcher, які працюють разом.
Клас Patern застосовується для завдання регулярного виразу. 
Клас Matcher зіставляє шаблон з послідовністю символів.
Регулярний вираз складається зі звичайних символів, наборів символів і групових символів.
Звичайні символи використовуються як є. Якщо в шаблоні вказати символи "кіт", то ці символи і будуть
шукатися в рядку.
Символи нового рядка, табуляції та ін. Визначаються за допомогою стандартних керуючих послідовностей,
які починаються з зворотного слеша (\). Наприклад, символ нового рядка можна задати як \ n.
Набори символів полягають в квадратні дужки. Наприклад, [cat] збігається з символами c, a, t.
Якщо поставити символ ^ перед набором символів - [^ cat], то шукаються збігу всіх символів, крім c, a, t.
Задайте фрагмент символів, використовується дефіс. Наприклад, діапазон від 1 до 9 можна задати як [1-9].
Символ точки є груповим символом, який збігається з будь-яким символом взагалі.
Також можна задати, скільки разів збігається вираз.
+ - збігається один або більше разів
* - збігається нуль або більше разів
? - збігається нуль або один ра
Наприклад, вираз -? \\ d + шукатиме число, у якого може бути мінус (а може і ні).
Вираз c.t дозволить знайти слова cat, cot, але не cart.
Регулярні вирази зустрічаються в методах класу String.

3. В чому полягає різниця між оператором «==» та методом «equals()»?
Основна відмінність в Java між equals and ==, дорівнює тому, що для порівняння примітивів
 використовується "==", а для перевірки рівності об'єктів рекомендується метод equals ().
Інша відмінність між ними полягає в тому, що якщо для порівняння об'єктів використовується і "==",
 і equals (), тоді == повертає істину, лише якщо обидва посилання вказують на один і той же об'єкт,
 а equals () може повернути істинне або помилкове на основі його overridden implementation. 
 Один з популярних випадків - це порівняння двох рядків на Java,в цьому випадку == і метод equals ()
 повертають різні результати.

Порівняння рядків є загальним сценарієм використання методу як ==, так і equals().
Оскільки java.lang.String клас перевизначає метод equals (), він повертає істину, якщо два об'єкти 
String містять однаковий вміст, але == повертає істину лише тоді, коли дві посилання вказують на один
 і той же об'єкт. Ось приклад порівняння двох рядків у Java для рівності за допомогою методу == та equals (),
 який очистить деякі сумніви:
String personalLoan = new String("cheap personal loans");
String homeLoan = new String("cheap personal loans");
     
//since two strings are different object result should be false
boolean result = personalLoan == homeLoan;
System.out.println("Comparing two strings with == operator: " + result);
     
//since strings contains same content , equals() should return true
result = personalLoan.equals(homeLoan);
System.out.println("Comparing two Strings with same content using equals method: " + result);
     
homeLoan = personalLoan;
//since both homeLoan and personalLoand reference variable are pointing to same object
//"==" should return true
result = (personalLoan == homeLoan);
System.out.println("Comparing two reference pointing to same String with == operator: " + result);

Output:
Comparing two strings with == operator: false
Comparing two Strings with same content using equals method: true
Comparing two references pointing to same String with == operator: true

Summary
1) use == to compare primitive e.g. boolean, int, char etc, while use equals() to compare objects in Java.
2) == return true if two reference are of same object. Result of equals() method depends on overridden implementation.
3) For comparing String use equals() instead of  == equality operator.


4. Для чого потрібні класи StringBuilder та StringBuffer?
Об'єкти String є незмінними, тому всі операції, які змінюють рядки, фактично призводять до 
створення нового рядка, що позначається на продуктивності додатка. Для вирішення цієї проблеми,
щоб робота з рядками проходила з меншими витратами в Java були додані класи StringBuffer і StringBuilder.
По суті вони нагадують розширений рядок, який можна змінювати без шкоди для продуктивності.
Ці класи схожі, практично двійники, вони мають однакові конструктори, одні і ті ж методи, які однаково
використовуються. Єдине їх відмінність полягає в тому, що клас StringBuffer синхронізований і потокобезпечна.
Тобто клас StringBuffer зручніше використовувати в багатопотокових застосуваннях, де об'єкт даного класу 
може змінюватися в різних потоках. Якщо ж мова про багатопоточних додатках не йде, то краще використовувати 
клас StringBuilder, яка не потокобезпечна, але при цьому працює швидше, ніж StringBuffer в однопоточних 
додатках.
StringBuffer визначає чотири конструктора:

StringBuffer()
StringBuffer(int capacity)
StringBuffer(String str)
StringBuffer(CharSequence chars)
Аналогічні конструктори визначає StringBuilder:

StringBuilder()
StringBuilder(int capacity)
StringBuilder(String str)
StringBuilder(CharSequence chars)
При всіх операціях з рядками StringBuffer / StringBuilder перерозподіляє виділену пам'ять. 
І щоб уникнути занадто частого перерозподілу пам'яті, StringBuffer / StringBuilder заздалегідь 
резервує певну область пам'яті, яка може використовуватися. Конструктор без параметрів резервує
 в пам'яті місце для 16 символів. Якщо ми хочемо, щоб кількість символів було іншим, то ми можемо
 застосувати другий конструктор, який в якості параметра приймає кількість символів.

5. Яким чином простіше всього прибрати пробіли на початку та кінці об’єкту String?
String.trim() - видаляє пробіли на початку і в кінці рядка.