1.Наразі в Java визначено 61 ключове слово. Разом  з синтаксисом операторів і розділювачима вони створюють визначення мови.Ключові слова не можна використовувати у вигляді імен змінних, класів, методів. Виключенням є контексно-залежні ключові слова, котрі зявились в JDK 9 для підтримки модулей.
Ключові слова const та go to зарезервовані, але не використовуються. Крім ключових слів в Java зарезервовані також логічні значення: true, false, null.

2. В Java є 8 примітивних типів данних, що діляться на 3  групи:
1)цілочисельні:
    byte - елемент з таблиці Менделеєва (-128 до 127)
    short - заробітня платня (-32768 до 32767)
    char - символ UTF-16
    int - довжина файлу в байтах (-2147483648 до 2147483647)
    long - кількість проданих платівок Олега Вінника (-9223372036854775808L до 9223372036854775807L)

2)типи з рухомою комою:
    float - здача від операції з грошима (1.4e-45f до 3.4e+38f)
    double - маса частинок в андронному колайдері (4.9e-324 до 1.7e+308)
3) логічний тип: 
    boolean - are you marry me? ( true or false)
     
3.Знакові числа приймають як - так і + значення, беззнакові лише +.
Знакові типи всі крім char(містить від 0 до 65535), boolean містить true or false.

4.Ліміти:
    short -32768 до 32767
    char - 0 до 65535
    int - -2147483648 до 2147483647
    long - -9223372036854775808L до 9223372036854775807L

5. 8 біт ( 1 біт під знак) - відповідно 7 бітів під число. 127, бо більше вже буде переповнення.
Тобто 127 це у двійковій 0111 1111
     -128 це у двійковій 1000 0000  

6.Системою числення, або нумерацією, називається сукупність правил і знаків, за допомогою яких можна відобразити (кодувати) будь-яке невід'ємне число. До систем числення висуваються певні вимоги, серед яких найбільш важливими є вимоги однозначного кодування невід'ємних чисел 0, 1,… з деякої їх скінченної множини — діапазону Р за скінченне число кроків і можливості виконання щодо чисел арифметичних і логічних операцій. Крім того, системи числення розв'язують задачу нумерації, тобто ефективного переходу від зображень чисел до номерів, які в даному випадку повинні мати мінімальну кількість цифр. Від вдалого чи невдалого вибору системи числення залежить ефективність розв'язання зазначених задач і її використання на практиці.
Наприклад, для переведення із десяткової до довільної позиційної системи числення потрібно ділити число із залишком на основу системи числення допоки частка не стане меншою за основу.

7.Доповняльний код (англ. two’s complement, «доповнення до 2») — найпоширеніший спосіб представлення від'ємних чисел у комп'ютерах. Дозволяє замість команди віднімання використовувати команду додавання, для знакових і беззнакових чисел, що зменшує вимоги до архітектури комп'ютера. Доповняльний код від'ємного числа можна отримати так: інвертувати модуль числа у двійковому вигляді («перше доповнення») і додати одиницю («друге доповнення») або відняти число від нуля. Математично доповняльний код Xдоп = 2N+1 — X, де X — число, яке треба представити у доповняльному коді, N — к-сть розрядів числа.

8. _ це розділювач для кращого візуального вигляду. результат операції 4_000_000_000.

9.Тип float презентує 32 біти, з 1 знаковим бітом, 8 бітами експоненти, та 23 значущими бітами.

double презентує 64 біти, з 1 знаковим бітом, 11 бітами експоненти, та 52 значущими бітами.Тобто більш точно репрезентує числа.
По дефолту Java використовує тип double. 

10.Число з рухомою комою — форма представлення дійсних чисел, в якій число зберігається у формі мантиси і показника степеня. Число з рухомою комою має фіксовану відносну точність, залежну від кількості розрядів мантиси, і змінювану абсолютну. Число з рухомою комою складається зі:
Знаку мантиси (вказує на від'ємність чи додатність числа)
Мантиси (виражає значення числа без урахування порядку)
Знака порядку
Порядку (виражає степінь основи числа, на яке множиться мантиса)


11."Nan" виходить, якщо операція з плаваючою точкою має деякі вхідні параметри, які призводять до того, що операція дає певний невизначений результат. Наприклад, 0,0, поділене на 0,0, є арифметично невизначеною. У javadoc константне поле NaN оголошується таким, у Float та Double Class відповідно.

12."Nan" не є визначеним, тому порівняння двух Nan дає false.

13.Ідея полягає в тому, що "++a" збільшує "a" і повертає це значення, тоді як "a++" повертає "a", а потім збільшує "a".
If you have
a = 1;
and you do
System.out.println(a++); //You will see 1
//Now a is 2
System.out.println(++a); //You will see 3

14.Логічна AND або Кон'юнкція (лат. conjangere — об'єднувати) (операція AND) — двомісна логічна операція, що має значення «істина», якщо всі операнди мають значення «істина».
  Побітове І — це бінарна операція, дія якої еквівалентно застосування логічного І до кожної пари бітів, які стоять на однакових позиціях у двійкових уявленнях операндів. Іншими словами, якщо обидва відповідних біта операндів рівні 1, результуючий двійковий розряд дорівнює 1, якщо ж хоча б один біт з пари дорівнює 0, результуючий двійковий розряд дорівнює 0.  

& < - перевіряє обидва операнда 
& & < - зупиняє оцінку, якщо перший операнд оцінює значення false, оскільки результат буде хибним.Це називається shortcircuiting та може вважатися оптимізацією. Це корисно для захисту від nullness.

if( x != null && x.equals("*BINGO*") {
  then do something with x...
}

15.XOR або Побітове АБО — це бінарна операція, дія якої еквівалентно застосування логічного АБО до кожної пари бітів, які стоять на однакових позиціях у двійкових уявленнях операндів. Іншими словами, якщо обидва відповідних біта операндів рівні 0, двійковий розряд результату дорівнює 0, якщо ж хоча б один біт з пари дорівнює 1, двійковий розряд результату дорівнює 1.

XOR або Додавання за модулем два (або двомісна операція виключне АБО) — це бінарна операція, результат дії якої дорівнює 1, якщо число складаємих одиничних бітів непарне, якщо ж їх число парне, то результат дорівнює 0.

16. a=false дасть false;
a == false дасть true

b = true дасть true
b == true дасть false

Задача на пріоритетність операторів: 1)&  2)|  3)&&  4)|| (в порядку спадання пріоритетності)



