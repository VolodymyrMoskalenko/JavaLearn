1.Структурне програмування - методологія розробки програмного забезпечення на основі представлення програми у вигляді ієрархічної структури блоків.

2.Згідно з цією методологією будь-яка програма може бути створена використовуючи три конструкції:
1) послідовне виконання — одноразове виконання операції в порядку запису їх (операцій) в тексті програми;
2) розгалуження — виконання певної операції або декількох операцій в залежності від стану певної, наперед заданої умови;
3) цикл — багаторазове виконання операції або групи операцій за умови виконання деякої наперед заданої умови. Така умова називається — умова продовження циклу.

3.Принципи структурного програмування:
    NO GOTO!
    sequence-selection-repetition
    nesting
    DRY 
    Блок
    Один вхід, один вихід
    Проектування згори-вниз

4.GO TO створює заплутаний код з можливістю переходів від одного місця до іншого, що  може створити багато невирішених депенденсіс.

5.Спагеті-код - погано спроектована, слабо структурована, заплутана і важка для розуміння програма, особливо що містить багато операторів GOTO (особливо переходів назад), винятків і інших конструкцій, що погіршують структурованість [1]. Найпоширеніший антипаттерн програмування.

6.Від загального до деталей (декомпозиція). Не потрібно відразу писати код для деталей, доки не досягнутий відповідний рівень конкретизації.

7.Під «видимістю змінних» мають на увазі місця в коді, де до цієї змінної можна звернутися. До деяких змінних можна звертатися звідусіль в програмі, до інших тільки в межах їх класу, до третіх тільки всередині одного методу.Не можна звернутися до змінної раніше, ніж вона оголошена.

8.Блок - це набір інструкцій поєднаних {}
Область видимості змінних:
    – з середини блоку можна «побачити» те, що знаходиться навколо нього
    – ззовні неможливо побачити те, що знаходиться всередині блоку
 Перевизначення змінних:
    – всередині блоку можна перевизначити змінну рівня класу або об’єкту
    – всередині блоку неможливо перевизначити локальну змінну

9.if - потрібно виконати дію тільки при одній умові;
if else - потрібно виконати дію і коли умова true і коли false;
if else if else... - потрібно виконати дію при багатьох умовах
switch - зручно коли є enum і з нього треба перебрати всі варіанти і т.д.
?: зменшує кількість коду, вкладені тернарні оператори погіршують швидкочитаємість коду.

10.for - зручніше використовувати коли є ініціалізація, умова, інкремент 
while - краще використовувати коли наявна лише умова.
do while - використовується, коли дія має виконатися хоча б раз.

while(true) , do while (true) зручно використовувати у звязці з break,
для негайного виходу. 

11.У циклах break зупиняє цикл і негайно виходить з нього. continue пропускає виконання, і переходить до наступної ітерації.

12.На відміну від інших мов програмування у Java міткою помічається не рядок, на який буде здійснено перехід, а блок, з якого буде здійснено вихід. break та continue впливають на поточний цикл. Якщо потрібно вийти з вкладеного циклу, використовуйте мітки. Це дуже зручно.

13. a is false, a = b
Виконується, коли if(true), тобто в 1 і 3 випадках.

14. 3
Були використанні пре і пост інкременти, що дають різні результати (преінкремент повертає збільшений результат одразу, в той час як постінкремент повертає на наступне використання змінної.

15.false
Так як i - integer, то sum теж приводиться до int і після циклу рівен 1. 
Якби i was double, тоді б sum = 2.82 і результат був би протилежний.    

